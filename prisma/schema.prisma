generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model audit {
  auditID          Int       @id @default(autoincrement())
  auditIP          String?   @db.VarChar(255)
  auditURL         String?   @db.VarChar(255)
  auditURLMethod   String?   @db.VarChar(255)
  auditURLPayload  String?   @db.VarChar(255)
  auditCreatedDate DateTime? @db.DateTime(0)
}

model user {
  userID           Int        @id @default(autoincrement())
  userSecretKey    String?    @db.VarChar(255)
  userUsername     String?    @db.VarChar(255)
  userPassword     String?    @db.VarChar(255)
  userFullName     String?    @db.VarChar(255)
  userEmail        String?    @db.VarChar(255)
  userPhone        String?    @db.VarChar(255)
  userStatus       String?    @db.VarChar(255)
  userCreatedDate  DateTime?  @db.DateTime(0)
  userModifiedDate DateTime?  @db.DateTime(0)
  userrole         userrole[]
}

model role {
  roleID           Int        @id @default(autoincrement())
  roleName         String?    @db.VarChar(255)
  roleDescription  String?    @db.VarChar(255)
  roleStatus       String?    @db.VarChar(255)
  roleCreatedDate  DateTime?  @db.DateTime(0)
  roleModifiedDate DateTime?  @db.DateTime(0)
  userrole         userrole[]
}

model lookup {
  lookupID           Int       @id @default(autoincrement())
  lookupOrder        Int?
  lookupTitle        String?   @db.VarChar(255)
  lookupRefCode      String?   @db.VarChar(255)
  lookupValue        String?   @db.VarChar(255)
  lookupType         String?   @db.VarChar(255)
  lookupStatus       String?   @db.VarChar(255)
  lookupCreatedDate  DateTime? @db.DateTime(0)
  lookupModifiedDate DateTime? @db.DateTime(0)
}

model userrole {
  userRoleID          Int      @id @default(autoincrement())
  userRoleUserID      Int      @default(0)
  userRoleRoleID      Int      @default(0)
  userRoleCreatedDate DateTime @db.DateTime(0)
  role                role     @relation(fields: [userRoleRoleID], references: [roleID], onDelete: NoAction, onUpdate: NoAction, map: "FK_userrole_role")
  user                user     @relation(fields: [userRoleUserID], references: [userID], onDelete: NoAction, onUpdate: NoAction, map: "FK_userrole_user")

  @@index([userRoleRoleID], map: "FK_userrole_role")
  @@index([userRoleUserID], map: "FK_userrole_user")
}

model page {
  pageID           Int           @id @default(autoincrement())
  pageKey          String?       @db.VarChar(255)
  pageTitle        String?       @db.VarChar(255)
  pageName         String?       @db.VarChar(255)
  pageURL          String?       @unique(map: "pageURL") @db.VarChar(255)
  pageCreatedDate  String?       @db.VarChar(255)
  pageModifiedDate String?       @db.VarChar(255)
  pagecontent      pagecontent[]
}

model pagecontent {
  pageContentID           Int       @id @default(autoincrement())
  pageContentCode         String?   @db.LongText
  pageContentCreatedDate  DateTime? @db.DateTime(0)
  pageContentModifiedDate DateTime? @db.DateTime(0)
  pageContentPageID       Int?
  page                    page?     @relation(fields: [pageContentPageID], references: [pageID], onDelete: NoAction, onUpdate: NoAction, map: "FK__page")

  @@index([pageContentPageID], map: "FK__page")
}

model book {
  bookID       Int     @id @default(autoincrement())
  bookName     String?
  bookSynopsis String?
  bookAuthor   String?
}

model customer {
  customerID      Int     @id @default(autoincrement())
  customerName    String?
  customerAddress String?
  customerPhone   String?
  customerStatus  String?
  customerGender  String?
}

model recipe23recipe {
  recipeId     Int           @id @default(autoincrement())
  recipeName   String?       @db.VarChar(255)
  ingredient   String?       @db.VarChar(255)
  duration     String?       @db.VarChar(255)
  recipe       String?       @db.VarChar(255)
  spicy        String?       @db.VarChar(255)
  country      String?       @db.VarChar(255)
  userId       Int?
  recipe23user recipe23user? @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "recipe23recipe_ibfk_1")

  @@index([userId], map: "userId")
}

model recipe23user {
  userId         Int              @id @default(autoincrement())
  userName       String?          @db.VarChar(255)
  userEmail      String?          @db.VarChar(255)
  userPassword   String?          @db.VarChar(255)
  recipe23recipe recipe23recipe[]
}

model stock {
  stockID       Int     @id @default(autoincrement())
  stockName     String? @db.VarChar(255)
  stockType     String? @db.VarChar(255)
  stockSize     String? @db.VarChar(255)
  stockQuantity Int?
  stockTotal    Int?
  stockStatus   String? @db.VarChar(255)
}
